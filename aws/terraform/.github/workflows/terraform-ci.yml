name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'aws/terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'aws/terraform/**'
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: aws/terraform
      
      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: aws/terraform
      
      - name: Terraform Validate
        run: terraform validate
        working-directory: aws/terraform

  test-lambdas:
    name: Test Lambda Functions
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install dependencies
        run: |
          cd aws/terraform/lambda
          npm install aws-sdk
      
      - name: Run Lambda tests
        run: |
          cd aws/terraform/lambda
          node test_lambdas.js

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      
      - name: Run tfsec
        run: tfsec aws/terraform
      
      - name: Setup checkov
        run: pip install checkov
      
      - name: Run checkov
        run: checkov -d aws/terraform

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: [test-lambdas, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Package Lambda functions
        run: |
          cd aws/terraform/lambda
          chmod +x package_all_lambdas.sh
          ./package_all_lambdas.sh
      
      - name: Terraform Init
        run: terraform init
        working-directory: aws/terraform
      
      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: aws/terraform
      
      - name: Comment Plan
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('aws/terraform/terraform.plan', 'utf8');
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output\n\n\`\`\`\n${planOutput}\n\`\`\``
            });

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: [test-lambdas, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Package Lambda functions
        run: |
          cd aws/terraform/lambda
          chmod +x package_all_lambdas.sh
          ./package_all_lambdas.sh
      
      - name: Terraform Init
        run: terraform init
        working-directory: aws/terraform
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: aws/terraform

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [apply]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.apply.result == 'success'
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "text": "✅ Terraform deployment successful for Job Matching API infrastructure!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Terraform deployment successful!*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The Job Matching API infrastructure has been successfully deployed."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
      - name: Notify failure
        if: needs.apply.result != 'success'
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "text": "❌ Terraform deployment failed for Job Matching API infrastructure!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Terraform deployment failed!*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The Job Matching API infrastructure deployment has failed. Please check the GitHub Actions logs for details."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
